# -*- coding: utf-8 -*-
"""keras-mnist-mlp

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1J_IshgKb1R40BQGk68HAowDkfvmKq8xH
"""

import tensorflow as tf
from tensorflow.keras import layers, models
import matplotlib.pyplot as plt

# 1. Carregar o dataset MNIST
(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()

# 2. Normalizar os dados (0-255 → 0-1)
x_train = x_train / 255.0
x_test = x_test / 255.0

# 3. Ver forma dos dados
print("Formato de x_train:", x_train.shape)  # (60000, 28, 28)
print("Formato de y_train:", y_train.shape)  # (60000,)

# 4. Construir o modelo
model = models.Sequential([
    layers.Flatten(input_shape=(28, 28)),         # Achata a imagem (28x28 → 784)
    layers.Dense(128, activation='relu'),         # Camada oculta
    layers.Dropout(0.2),                          # Dropout pra evitar overfitting
    layers.Dense(10, activation='softmax')        # Camada de saída (10 classes)
])

# 5. Compilar o modelo
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

# 6. Treinar o modelo
history = model.fit(x_train, y_train, epochs=5, validation_split=0.1)

# 7. Avaliar no conjunto de teste
test_loss, test_acc = model.evaluate(x_test, y_test)
print("\nAcurácia no teste:", test_acc)

# 8. Plotar acurácia e perda
plt.plot(history.history['accuracy'], label='Treino')
plt.plot(history.history['val_accuracy'], label='Validação')
plt.title('Acurácia durante o treinamento')
plt.xlabel('Época')
plt.ylabel('Acurácia')
plt.legend()
plt.show()